// <auto-generated />
using System;
using IMS.DomainModel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IMS.Web.Migrations
{
    [DbContext(typeof(IMSDbContext))]
    [Migration("20190521072246_added_notice_related_tables")]
    partial class added_notice_related_tables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IMS.DomainModel.Models.ActivityAttendeeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityAttendeeType");

                    b.Property<int>("ActivityId");

                    b.Property<string>("AttendeeId")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AttendeeId");

                    b.ToTable("ActivityAttendeeMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ActivityStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("ActivityStatus");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AdministrationCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("StateId");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("AdministrationCities");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AdministrationCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("AdministrationCountries");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AdministrationCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CurrencyName")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<bool>("Status");

                    b.Property<string>("Symbol")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("AdministrationCurrencies");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AdministrationEmailConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("EnableSsl");

                    b.Property<string>("HostName")
                        .IsRequired();

                    b.Property<int>("InstituteId");

                    b.Property<string>("MailPassword")
                        .IsRequired();

                    b.Property<string>("MailUserName")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PortNumber");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AdministrationEmailConfigurations");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AdministrationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("AdministrationStates");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool?>("ForgotPasswordInitiated");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AutoSequenceGenerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AutoSequenceGeneratorType");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CustomText");

                    b.Property<int>("InstituteId");

                    b.Property<int>("Seperator");

                    b.Property<string>("UpdateById");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UpdateById");

                    b.ToTable("AutoSequenceGenerators");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AutoSequenceGeneratorDataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AutoSequenceGeneratorId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsSelected");

                    b.Property<int>("Length");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("AutoSequenceGeneratorId");

                    b.ToTable("AutoSequenceGeneratorDataTypes");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.BloodGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("BloodGroups");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Caste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("Castes");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.CircularNotice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Message");

                    b.Property<DateTime>("NoticeDate");

                    b.Property<int>("NoticeTo");

                    b.Property<int>("NoticeType");

                    b.Property<string>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CircularNotices");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.CircularNoticeRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CircularNoticeId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("RecipientId")
                        .IsRequired();

                    b.Property<int>("RecipientType");

                    b.HasKey("Id");

                    b.HasIndex("CircularNoticeId");

                    b.HasIndex("RecipientId");

                    b.ToTable("CircularNoticeRecipients");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ClassExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("ExamId");

                    b.Property<int>("SectionId");

                    b.Property<int>("TotalAttendanceDays");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ExamId");

                    b.HasIndex("SectionId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ClassExams");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ClassExamSubjectMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassExamId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EndTime");

                    b.Property<double>("MaxScore");

                    b.Property<double>("MinScore");

                    b.Property<string>("Remark");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("StartTime");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("ClassExamId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClassExamSubjectMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.CourseFeeTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcademicYearId");

                    b.Property<int>("ClassId");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DueDate");

                    b.Property<int>("InstituteId");

                    b.Property<double>("LateFee");

                    b.Property<int>("ReligionId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ClassId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.HasIndex("ReligionId");

                    b.ToTable("CourseFeeTerms");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.CourseFeeTermDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("CourseFeeTermId");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FeeComponentId");

                    b.Property<int>("Term");

                    b.HasKey("Id");

                    b.HasIndex("CourseFeeTermId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FeeComponentId");

                    b.ToTable("CourseFeeTermDetails");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DepartmentName")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("DesignationName")
                        .IsRequired();

                    b.Property<int>("InstituteId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Disciplinary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Remarks");

                    b.Property<int>("StatusId");

                    b.Property<int>("StudentId");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("UploadMemo");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Disciplinaries");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.DisciplinaryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsEditable");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("DisciplinaryStatuses");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.DriverMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateOfIssue");

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsDriver");

                    b.Property<string>("IssuingAuthority")
                        .IsRequired();

                    b.Property<string>("LicenseNumber")
                        .IsRequired();

                    b.Property<string>("LicensePhoto");

                    b.Property<string>("LicenseType")
                        .IsRequired();

                    b.Property<string>("MobileNumber")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PlaceOfIssue")
                        .IsRequired();

                    b.Property<double>("Salary");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<DateTime>("ValidityTill");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("DriverMasters");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.EventInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("EventDate");

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.ToTable("EventInfos");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.EventReportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bcc");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Message");

                    b.Property<DateTime>("SentOn");

                    b.Property<string>("Subject");

                    b.Property<int>("TemplateFeatureId");

                    b.Property<int>("TemplateFormat");

                    b.Property<int>("TemplateTypeId");

                    b.Property<string>("To");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("TemplateFeatureId");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("EventReportDetails");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ExamDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("ExamDefinitions");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ExamScoreEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("ExamId");

                    b.Property<double>("Mark");

                    b.Property<int>("StudentId");

                    b.Property<int>("SubjectId");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ExamScoreEntrys");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FeeComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FeeComponentType");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.ToTable("FeeComponents");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FeeReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("BankName");

                    b.Property<string>("ChallanNumber")
                        .IsRequired();

                    b.Property<DateTime?>("ChequeDate");

                    b.Property<string>("ChequeNumber");

                    b.Property<int>("ClassId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsNewAdmission");

                    b.Property<double>("LateFee");

                    b.Property<double>("PreviousAmountPaid");

                    b.Property<DateTime>("ReceiptDate");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired();

                    b.Property<int>("ReceiptType");

                    b.Property<int>("StudentId");

                    b.Property<double>("Total");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("FeeReceipts");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FeeReceiptComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FeeReciptId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("FeeReciptId");

                    b.ToTable("FeeReceiptComponents");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FeeRefund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("BankName")
                        .IsRequired();

                    b.Property<string>("ChallanNumber")
                        .IsRequired();

                    b.Property<DateTime>("ChequeDate");

                    b.Property<string>("ChequeNumber")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("IssuedById")
                        .IsRequired();

                    b.Property<DateTime>("RefundDate");

                    b.Property<string>("RefundNumber")
                        .IsRequired();

                    b.Property<string>("Remark");

                    b.Property<int>("StudentId");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("IssuedById");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("FeeRefunds");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FinanceChartOfAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountType");

                    b.Property<string>("AliasName")
                        .IsRequired();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsParent");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ParentGroupId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("FinanceChartOfAccounts");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FinancePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<int>("PaidToId");

                    b.Property<string>("PaymentById")
                        .IsRequired();

                    b.Property<DateTime>("PaymentDate");

                    b.Property<int>("PaymentReference");

                    b.Property<int>("PaymentTypeId");

                    b.Property<string>("ReferenceCode");

                    b.Property<DateTime?>("ReferenceDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.HasIndex("PaidToId");

                    b.HasIndex("PaymentById");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("FinancePayments");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FinancePaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.ToTable("FinancePaymentTypes");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FinanceReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<DateTime>("ReceiptDate");

                    b.Property<string>("ReceivedBy")
                        .IsRequired();

                    b.Property<int>("ReceivedFrom");

                    b.Property<string>("Remarks");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.HasIndex("ReceivedBy");

                    b.HasIndex("ReceivedFrom");

                    b.ToTable("FinanceReceipts");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcademicYearId");

                    b.Property<int?>("CompanyWbs");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<DateTime>("HolidayDate");

                    b.Property<DateTime?>("HolidayToDate");

                    b.Property<int>("InstitutionId");

                    b.Property<int>("OccuranceType");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Homework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("HomeworkDate");

                    b.Property<int>("SectionId");

                    b.Property<int>("StaffId");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.HomeworkMailMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("HomeworkId");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.ToTable("HomeworkMailMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.HomeworkMessageMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("HomeworkId");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.ToTable("HomeworkMessageMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.HomeworkSubjectMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("HomeworkData")
                        .IsRequired();

                    b.Property<int>("HomeworkId");

                    b.Property<bool>("IsSelected");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("SubjectId");

                    b.ToTable("HomeworkSubjectMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Institute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AdminId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Location");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Institutes");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteAcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcademicYearCode")
                        .IsRequired();

                    b.Property<string>("ChallanStartingNumber")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("CompanyWbs");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("FromDate");

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ToDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InstituteId");

                    b.ToTable("InstituteAcademicYears");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteBccCcEmailMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsBcc");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("InstituteBccCcEmailMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassOrder");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<double>("Duration");

                    b.Property<int>("DurationUnit");

                    b.Property<string>("GroupCode")
                        .IsRequired();

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsGroup");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumberOfFeeTerms");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("InstituteClasses");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteClassSubjectMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AlternateFacultyId");

                    b.Property<int>("ClassId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FacultyId");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("AlternateFacultyId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SubjectId");

                    b.ToTable("InstituteClassSubjectMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteLanguageMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("InstituteLanguageMasters");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteNationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("InstituteNationalities");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("InstituteRoles");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsGroup");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("InstituteSubjects");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.LookUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("LookUps");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.LookUpMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystemRow");

                    b.Property<int>("LookUpId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("LookUpId");

                    b.ToTable("LookUpMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.MeetingAgenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("MeetingAgendas");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.MotherTongue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Language")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.ToTable("MotherTongues");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ReligionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("ReligionCategories");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.RouteStageMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<double>("Distance");

                    b.Property<int>("FromPlaceId");

                    b.Property<int>("OrderId");

                    b.Property<int>("RouteId");

                    b.Property<int>("ToPlaceId");

                    b.HasKey("Id");

                    b.HasIndex("FromPlaceId");

                    b.HasIndex("RouteId");

                    b.HasIndex("ToPlaceId");

                    b.ToTable("RouteStageMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Slab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("Slabs");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.SportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("SportDetails");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityStatusId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("EndTime")
                        .IsRequired();

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Location");

                    b.Property<int>("MeetingAgendaId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("StartTime")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("InstituteId");

                    b.HasIndex("MeetingAgendaId");

                    b.ToTable("StaffActivities");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffBasicPersonalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlternatePhoneNumber");

                    b.Property<int?>("BiometricId");

                    b.Property<int?>("BloodGroupId");

                    b.Property<int?>("CasteId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateOfJoining");

                    b.Property<int>("DesignationId");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("FamilyImage");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("GenderId");

                    b.Property<string>("IdentificationMarks");

                    b.Property<int?>("InstituteId");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsPresentAddressIsSameAsPermanent");

                    b.Property<bool>("IsTeachingStaff");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int?>("MaritalStatusId");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MobileNumber")
                        .IsRequired();

                    b.Property<int?>("MotherTongueId");

                    b.Property<int?>("NationalityId");

                    b.Property<DateTime?>("PassportExpireDate");

                    b.Property<int?>("PassportIssuedCountryId");

                    b.Property<DateTime?>("PassportIssuedDate");

                    b.Property<string>("PassportNumber");

                    b.Property<string>("PermanentAddress")
                        .IsRequired();

                    b.Property<int>("PermanentCityId");

                    b.Property<string>("PermanentZipcode");

                    b.Property<string>("PersonalImage");

                    b.Property<string>("PresentAddress");

                    b.Property<int>("PresentCityId");

                    b.Property<string>("PresentZipcode");

                    b.Property<string>("Qualification");

                    b.Property<int?>("ReligionId");

                    b.Property<string>("SocialSecurityNumber");

                    b.Property<int?>("TeachingStaffId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("CasteId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("GenderId");

                    b.HasIndex("InstituteId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("MotherTongueId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PassportIssuedCountryId");

                    b.HasIndex("PermanentCityId");

                    b.HasIndex("PresentCityId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("TeachingStaffId");

                    b.HasIndex("UserId");

                    b.ToTable("StaffBasicPersonalInformation");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffDepartmentMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DepartmentId");

                    b.Property<int>("StaffId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffDepartmentMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffExperienceMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("InstituteName")
                        .IsRequired();

                    b.Property<int>("StaffId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffExperiences");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffGalleryMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<int>("StaffId");

                    b.Property<DateTime>("UpdateOn");

                    b.Property<string>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("StaffGalleryMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffPlanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DateOfPlan");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("StaffId");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffPlanners");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentArticles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArticleFilePath");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FileName");

                    b.Property<bool>("IsApproved");

                    b.Property<DateTime>("SubmissionDate");

                    b.Property<int>("SubmittedBy");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SubmittedBy");

                    b.ToTable("StudentArticles");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AttendanceDate");

                    b.Property<int>("AttendanceType");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("PeriodOrderId");

                    b.Property<int>("StudentId");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("StudentAttendances");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AwardName")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("InstituteName")
                        .IsRequired();

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAwards");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentBasicInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdmissionClassId");

                    b.Property<DateTime>("AdmissionDate");

                    b.Property<string>("AdmissionNumber")
                        .IsRequired();

                    b.Property<string>("AlternatePhoneNumber");

                    b.Property<int?>("BiometricId");

                    b.Property<int?>("BloodGroupId");

                    b.Property<int?>("CasteId");

                    b.Property<string>("ComingBy");

                    b.Property<string>("ComingPlace");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CurrentAcademicYearId");

                    b.Property<int>("CurrentClassId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FamilyRelationEmail");

                    b.Property<string>("FamilyRelationMobileNumber")
                        .IsRequired();

                    b.Property<string>("FamilyRelationMonthlyIncome");

                    b.Property<string>("FamilyRelationName")
                        .IsRequired();

                    b.Property<int?>("FamilyRelationOccupationId");

                    b.Property<int>("FamilyRelationType");

                    b.Property<string>("FeeChallanNumber")
                        .IsRequired();

                    b.Property<int>("FirstLanguageId");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("GenderId");

                    b.Property<string>("IdentificationMarks");

                    b.Property<int?>("InstituteId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsPhysicallyHandicapped");

                    b.Property<bool>("IsPresentAddressIsSameAsPermanent");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int?>("MaritalStatusId");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MobileNumber")
                        .IsRequired();

                    b.Property<string>("MotherName")
                        .IsRequired();

                    b.Property<int?>("MotherTongueId");

                    b.Property<int?>("NationalityId");

                    b.Property<DateTime?>("PassportExpireDate");

                    b.Property<int?>("PassportIssuedCountryId");

                    b.Property<DateTime?>("PassportIssuedDate");

                    b.Property<string>("PassportNumber");

                    b.Property<string>("PermanentAddress")
                        .IsRequired();

                    b.Property<int>("PermanentCityId");

                    b.Property<string>("PermanentZipcode");

                    b.Property<string>("PersonalImage");

                    b.Property<string>("PresentAddress");

                    b.Property<int>("PresentCityId");

                    b.Property<string>("PresentZipcode");

                    b.Property<int?>("RelievingClassId");

                    b.Property<DateTime?>("RelievingDate");

                    b.Property<string>("RelievingReason");

                    b.Property<int>("RelievingType");

                    b.Property<int?>("ReligionId");

                    b.Property<string>("RollNumber")
                        .IsRequired();

                    b.Property<string>("SchoolApplicationNumber");

                    b.Property<int>("SecondLanguageId");

                    b.Property<int?>("SectionId");

                    b.Property<string>("SocialSecurityNumber");

                    b.Property<DateTime?>("TCDate");

                    b.Property<string>("TCNumber");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AdmissionClassId");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("CasteId");

                    b.HasIndex("CurrentAcademicYearId");

                    b.HasIndex("CurrentClassId");

                    b.HasIndex("FamilyRelationOccupationId");

                    b.HasIndex("FirstLanguageId");

                    b.HasIndex("GenderId");

                    b.HasIndex("InstituteId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("MotherTongueId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PassportIssuedCountryId");

                    b.HasIndex("PermanentCityId");

                    b.HasIndex("PresentCityId");

                    b.HasIndex("RelievingClassId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SecondLanguageId");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentBasicInformation");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentDiscipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Descriptiom")
                        .IsRequired();

                    b.Property<DateTime>("DisciplineDate");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentDisciplines");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("StudentId");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("StudentFees");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentFeeComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("IndividualOrDiscountFeeComponentId");

                    b.Property<int>("StudentFeeId");

                    b.Property<int>("TermOrderId");

                    b.HasKey("Id");

                    b.HasIndex("IndividualOrDiscountFeeComponentId");

                    b.HasIndex("StudentFeeId");

                    b.ToTable("StudentFeeComponents");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentGalleryMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<int>("StudentId");

                    b.Property<DateTime>("UpdateOn");

                    b.Property<string>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("StudentGalleryMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentNotificationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<int>("NotificationType");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("SentAt");

                    b.Property<string>("SentBy");

                    b.Property<int>("StudentId");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("SentBy");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentNotificationDetails");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentPriorEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("FromDate");

                    b.Property<string>("InstituteName")
                        .IsRequired();

                    b.Property<int>("StudentId");

                    b.Property<DateTime>("ToDate");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPriorEducations");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentPromotionMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CurrentClassId");

                    b.Property<int>("CurrentSectionId");

                    b.Property<int>("PromotedToClassId");

                    b.Property<int>("PromotedToSectionId");

                    b.Property<string>("Remark");

                    b.Property<int>("StudentId");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CurrentClassId");

                    b.HasIndex("CurrentSectionId");

                    b.HasIndex("PromotedToClassId");

                    b.HasIndex("PromotedToSectionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("StudentPromotionMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentRecieveHomeworkMailMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("HomeworkMailId");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkMailId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRecieveHomeworkMailMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentRecieveHomeworkMessageMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("HomeworkMessageId");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkMessageId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRecieveHomeworkMessageMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentRelievingMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Reason");

                    b.Property<DateTime>("RelievingDate");

                    b.Property<int>("StudentId");

                    b.Property<int>("StudentRelieving");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("StudentRelievingMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentRouteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("RouteId");

                    b.Property<int>("StudentId");

                    b.Property<string>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("StudentRouteMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("LevelId");

                    b.Property<int>("SportId");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("SportId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSports");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TeachingStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("TeachingStaffs");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EmailBcc");

                    b.Property<string>("EmailSubject");

                    b.Property<string>("Format");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TemplateFeatureId");

                    b.Property<int>("TemplateFormat");

                    b.Property<int>("TemplateTypeId");

                    b.Property<string>("To");

                    b.HasKey("Id");

                    b.HasIndex("TemplateFeatureId");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TemplateFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("TemplateFeatures");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TemplateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("TemplateTypes");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcademicYearId");

                    b.Property<int>("BreaksCount");

                    b.Property<int>("ClassId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<int>("PeriodCount");

                    b.Property<int>("PeriodDuration");

                    b.Property<string>("PeriodStartTime")
                        .IsRequired();

                    b.Property<int>("SectionId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ClassId");

                    b.HasIndex("InstituteId");

                    b.HasIndex("SectionId");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TimeTableBreakDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BreakAfterPeriod");

                    b.Property<int>("BreakDuration");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("TimeTableId");

                    b.HasKey("Id");

                    b.HasIndex("TimeTableId");

                    b.ToTable("TimeTableBreakDetails");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TimeTableDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("PeriodNumber");

                    b.Property<int>("SubjectId");

                    b.Property<int>("TimeTableId");

                    b.Property<int>("WeekDaysEnum");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TimeTableId");

                    b.ToTable("TimeTableDetails");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TransportationStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("SlabId");

                    b.Property<double>("Term1");

                    b.Property<double>("Term2");

                    b.Property<double>("Term3");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("SlabId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("TransportationStages");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.UserApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthToken")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserApiKeys");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanDelete");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int?>("CompanyWbs");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("InstituteId");

                    b.Property<DateTime?>("LastUpdatedDate");

                    b.Property<string>("LastUpdatedUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InstituteId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.UserGroupFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanAdd");

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanEdit");

                    b.Property<bool>("CanView");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("UserGroupFeatureChild");

                    b.Property<int>("UserGroupFeatureParent");

                    b.Property<int>("UserGroupId");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("UserGroupFeatures");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.UserGroupMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("UserGroupId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupMapping");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.UserInstituteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstituteId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInstituteMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleAccident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AccidentDate");

                    b.Property<string>("Address");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DriverId");

                    b.Property<double>("EstimateCost");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleAccidents");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleBreakDown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("BreakDownDate");

                    b.Property<DateTime>("BreakDownDuration");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DriverId");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleBreakDowns");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleDriverMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DriverId");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("UpdatedById");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleDriverMappings");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionTaken")
                        .IsRequired();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<double>("EstimateCost");

                    b.Property<DateTime>("MaintenanceDate");

                    b.Property<string>("MaintenanceDoneBy");

                    b.Property<DateTime>("NextMaintenanceDate");

                    b.Property<string>("Remark");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleMaintenances");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AverageKMPL");

                    b.Property<string>("ChasisNumber");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EngineNumber")
                        .IsRequired();

                    b.Property<string>("ExtraFittings");

                    b.Property<DateTime?>("FitnessExpDate");

                    b.Property<int>("FuelType");

                    b.Property<int>("InstituteId");

                    b.Property<string>("InsuranceCopyPhoto");

                    b.Property<DateTime?>("InsuranceDate");

                    b.Property<DateTime?>("InsuranceExpDate");

                    b.Property<string>("InsuranceNumber");

                    b.Property<DateTime>("NextMaintenanceDate");

                    b.Property<DateTime?>("PermitValidityDate");

                    b.Property<string>("RegistrationCopyPhoto");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("VehicleCode")
                        .IsRequired();

                    b.Property<string>("VehiclePhoto");

                    b.Property<string>("VehicleRegistrationNumber")
                        .IsRequired();

                    b.Property<int>("VehicleType");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("VehicleMasters");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleRepair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Remarks");

                    b.Property<double>("RepairCost");

                    b.Property<DateTime>("RepairDate");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleRepairs");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.WeekOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcademicYearId");

                    b.Property<int?>("CompanyWbs");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("InstitutionId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int>("WeekDay");

                    b.Property<int>("WeekNumber");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("WeekOffs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ActivityAttendeeMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.StaffActivity", "Activity")
                        .WithMany("ActivityAttendeeMappings")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ActivityStatus", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AdministrationCity", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.AdministrationState", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AdministrationCountry", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("AdministrationCountries")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AdministrationCurrency", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("AdministrationCurrencies")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AdministrationEmailConfiguration", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedByuser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AdministrationState", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.AdministrationCountry", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AutoSequenceGenerator", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.AutoSequenceGeneratorDataType", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.AutoSequenceGenerator", "AutoSequenceGenerator")
                        .WithMany("AutoSequenceGeneratorDataTypes")
                        .HasForeignKey("AutoSequenceGeneratorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.BloodGroup", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("BloodGroups")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Caste", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("Castes")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.CircularNotice", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.CircularNoticeRecipient", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.CircularNotice", "CircularNotice")
                        .WithMany("CircularNoticeRecipients")
                        .HasForeignKey("CircularNoticeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ClassExam", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ExamDefinition", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ClassExamSubjectMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ClassExam", "ClassExam")
                        .WithMany("ClassExamSubjectMappings")
                        .HasForeignKey("ClassExamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.InstituteSubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.CourseFeeTerm", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.InstituteAcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "InstituteClass")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.CourseFeeTermDetails", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.CourseFeeTerm", "CourseFeeTerm")
                        .WithMany()
                        .HasForeignKey("CourseFeeTermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.FeeComponent", "FeeComponent")
                        .WithMany()
                        .HasForeignKey("FeeComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Department", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedByuser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Designation", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedByuser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Disciplinary", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.DisciplinaryStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.DisciplinaryStatus", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.DriverMaster", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.EventInfo", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.EventReportDetail", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.TemplateFeature", "TemplateFeatures")
                        .WithMany()
                        .HasForeignKey("TemplateFeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.TemplateType", "TemplateType")
                        .WithMany()
                        .HasForeignKey("TemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ExamDefinition", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ExamScoreEntry", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ClassExam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.InstituteSubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FeeComponent", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FeeReceipt", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FeeReceiptComponent", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.FeeReceipt", "FeeReceipt")
                        .WithMany("FeeReceiptComponents")
                        .HasForeignKey("FeeReciptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FeeRefund", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FinanceChartOfAccounts", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.FinanceChartOfAccounts", "ParentChartOfAccount")
                        .WithMany("ChildChartOfAccounts")
                        .HasForeignKey("ParentGroupId");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FinancePayment", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.FinanceChartOfAccounts", "PaidToChartOfAccounts")
                        .WithMany()
                        .HasForeignKey("PaidToId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "PaymentByUser")
                        .WithMany()
                        .HasForeignKey("PaymentById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.FinancePaymentType", "FinancePaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FinancePaymentType", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.FinanceReceipt", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "ReceivedByUser")
                        .WithMany()
                        .HasForeignKey("ReceivedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.FinanceChartOfAccounts", "ReceivedFromChartOfAccount")
                        .WithMany()
                        .HasForeignKey("ReceivedFrom")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Gender", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("Genders")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Holiday", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Homework", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StaffBasicPersonalInformation", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.HomeworkMailMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Homework", "Homework")
                        .WithMany("HomeworkMailMappings")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.HomeworkMessageMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Homework", "Homework")
                        .WithMany("HomeworkMessageMappings")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.HomeworkSubjectMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Homework", "Homework")
                        .WithMany("HomeworkSubjectMappings")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.InstituteSubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Institute", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteAcademicYear", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteBccCcEmailMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("InstituteBccCcEmailMappings")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteClass", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("InstituteClasses")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteClassSubjectMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.StaffBasicPersonalInformation", "AlternateFaculty")
                        .WithMany()
                        .HasForeignKey("AlternateFacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "InstituteClass")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StaffBasicPersonalInformation", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.InstituteSubject", "InstituteSubject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteLanguageMaster", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("InstituteLanguageMasters")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteNationality", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("InstituteNationalities")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteRole", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("InstituteRoles")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.InstituteSubject", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("InstituteSubjects")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Level", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("Levels")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.LookUp", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("LookUps")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.LookUpMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.LookUp", "LookUp")
                        .WithMany("LookUpMappings")
                        .HasForeignKey("LookUpId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.MaritalStatus", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.MeetingAgenda", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.MotherTongue", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Occupation", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("Occupations")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Qualification", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("Qualifications")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Relationship", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("Relationships")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Religion", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("Religions")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.ReligionCategory", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("ReligionCategories")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Route", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.RouteStageMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.TransportationStage", "FromPlace")
                        .WithMany()
                        .HasForeignKey("FromPlaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Route", "Route")
                        .WithMany("RouteStageMappings")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.TransportationStage", "ToPlace")
                        .WithMany()
                        .HasForeignKey("ToPlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Section", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Slab", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.SportDetail", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("SportDetails")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffActivity", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ActivityStatus", "ActivityStatus")
                        .WithMany()
                        .HasForeignKey("ActivityStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.MeetingAgenda", "MeetingAgenda")
                        .WithMany()
                        .HasForeignKey("MeetingAgendaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffBasicPersonalInformation", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.BloodGroup", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupId");

                    b.HasOne("IMS.DomainModel.Models.Caste", "Caste")
                        .WithMany()
                        .HasForeignKey("CasteId");

                    b.HasOne("IMS.DomainModel.Models.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId");

                    b.HasOne("IMS.DomainModel.Models.MaritalStatus", "MaritalStatusMap")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("IMS.DomainModel.Models.MotherTongue", "MotherTongue")
                        .WithMany()
                        .HasForeignKey("MotherTongueId");

                    b.HasOne("IMS.DomainModel.Models.InstituteNationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("IMS.DomainModel.Models.AdministrationCountry", "PassportIssuedCountry")
                        .WithMany()
                        .HasForeignKey("PassportIssuedCountryId");

                    b.HasOne("IMS.DomainModel.Models.AdministrationCity", "PermanentCity")
                        .WithMany()
                        .HasForeignKey("PermanentCityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.AdministrationCity", "PresentCity")
                        .WithMany()
                        .HasForeignKey("PresentCityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.HasOne("IMS.DomainModel.Models.TeachingStaff", "TeachingStaff")
                        .WithMany()
                        .HasForeignKey("TeachingStaffId");

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffDepartmentMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StaffBasicPersonalInformation", "Staff")
                        .WithMany("StaffDepartments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffExperienceMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.StaffBasicPersonalInformation", "Staff")
                        .WithMany("StaffExperiences")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffGalleryMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.StaffBasicPersonalInformation", "Staff")
                        .WithMany("StaffGalleries")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StaffPlanner", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StaffBasicPersonalInformation", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentArticles", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "SubmittedByStudent")
                        .WithMany()
                        .HasForeignKey("SubmittedBy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentAttendance", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentAward", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany("StudentAwards")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentBasicInformation", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "AdmissionClass")
                        .WithMany()
                        .HasForeignKey("AdmissionClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.BloodGroup", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupId");

                    b.HasOne("IMS.DomainModel.Models.Caste", "Caste")
                        .WithMany()
                        .HasForeignKey("CasteId");

                    b.HasOne("IMS.DomainModel.Models.InstituteAcademicYear", "CurrentAcademicYear")
                        .WithMany()
                        .HasForeignKey("CurrentAcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "CurrentClass")
                        .WithMany()
                        .HasForeignKey("CurrentClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Occupation", "FamilyRelationOccupation")
                        .WithMany()
                        .HasForeignKey("FamilyRelationOccupationId");

                    b.HasOne("IMS.DomainModel.Models.InstituteLanguageMaster", "FirstLanguage")
                        .WithMany()
                        .HasForeignKey("FirstLanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId");

                    b.HasOne("IMS.DomainModel.Models.MaritalStatus", "MaritalStatusMap")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("IMS.DomainModel.Models.MotherTongue", "MotherTongue")
                        .WithMany()
                        .HasForeignKey("MotherTongueId");

                    b.HasOne("IMS.DomainModel.Models.InstituteNationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("IMS.DomainModel.Models.AdministrationCountry", "PassportIssuedCountry")
                        .WithMany()
                        .HasForeignKey("PassportIssuedCountryId");

                    b.HasOne("IMS.DomainModel.Models.AdministrationCity", "PermanentCity")
                        .WithMany()
                        .HasForeignKey("PermanentCityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.AdministrationCity", "PresentCity")
                        .WithMany()
                        .HasForeignKey("PresentCityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "RelievingClass")
                        .WithMany()
                        .HasForeignKey("RelievingClassId");

                    b.HasOne("IMS.DomainModel.Models.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.HasOne("IMS.DomainModel.Models.InstituteLanguageMaster", "SecondLanguage")
                        .WithMany()
                        .HasForeignKey("SecondLanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Section", "SectionMap")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentDiscipline", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany("StudentDisciplines")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentFee", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentFeeComponent", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.FeeComponent", "IndividualOrDiscountFeeComponent")
                        .WithMany()
                        .HasForeignKey("IndividualOrDiscountFeeComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StudentFee", "StudentFee")
                        .WithMany("StudentFeeComponents")
                        .HasForeignKey("StudentFeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentGalleryMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany("StudentGalleries")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentNotificationDetails", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "SentByUser")
                        .WithMany()
                        .HasForeignKey("SentBy");

                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentPriorEducation", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany("StudentPriorEducations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentPromotionMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "CurrentClass")
                        .WithMany()
                        .HasForeignKey("CurrentClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Section", "CurrentSection")
                        .WithMany()
                        .HasForeignKey("CurrentSectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "PromotedToClass")
                        .WithMany()
                        .HasForeignKey("PromotedToClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Section", "PromotedToSection")
                        .WithMany()
                        .HasForeignKey("PromotedToSectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentRecieveHomeworkMailMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.HomeworkMailMapping", "HomeworkMailMapping")
                        .WithMany("StudentRecieveHomeworkMailMappings")
                        .HasForeignKey("HomeworkMailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentRecieveHomeworkMessageMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.HomeworkMessageMapping", "HomeworkMessageMapping")
                        .WithMany("StudentRecieveHomeworkMessageMappings")
                        .HasForeignKey("HomeworkMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentRelievingMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentRouteMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.StudentSport", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.SportDetail", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.StudentBasicInformation", "Student")
                        .WithMany("StudentSports")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TeachingStaff", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.Template", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.TemplateFeature", "TemplateFeatures")
                        .WithMany()
                        .HasForeignKey("TemplateFeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.TemplateType", "TemplateType")
                        .WithMany()
                        .HasForeignKey("TemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TemplateFeature", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TemplateType", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TimeTable", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.InstituteAcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.InstituteClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TimeTableBreakDetails", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.TimeTable", "TimeTable")
                        .WithMany()
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TimeTableDetails", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.InstituteSubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.TimeTable", "TimeTable")
                        .WithMany()
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.TransportationStage", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.Slab", "Slab")
                        .WithMany()
                        .HasForeignKey("SlabId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.UserApiKey", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.UserGroup", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.UserGroupFeature", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.UserGroup", "UserGroup")
                        .WithMany("UserGroupFeatures")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.UserGroupMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.UserInstituteMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany("UserInstituteMappings")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "User")
                        .WithMany("UserInstituteMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleAccident", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.DriverMaster", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("IMS.DomainModel.Models.VehicleMaster", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleBreakDown", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.DriverMaster", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("IMS.DomainModel.Models.VehicleMaster", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleDriverMapping", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.DriverMaster", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("IMS.DomainModel.Models.VehicleMaster", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleMaintenance", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("IMS.DomainModel.Models.VehicleMaster", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleMaster", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("IMS.DomainModel.Models.VehicleRepair", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("IMS.DomainModel.Models.VehicleMaster", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMS.DomainModel.Models.WeekOff", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.InstituteAcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMS.DomainModel.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IMS.DomainModel.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
